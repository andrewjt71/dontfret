const NOTES=["E","B","G","D","A","E"],NOTE_MAP=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],STRING_OFFSETS=[4,11,7,2,9,4],FRET_COUNT=13,DOT_FRETS=[3,5,7,9,12],EDGE_MARGIN=.05,OPEN_STRING_HITBOX_WIDTH=20,OPEN_STRING_HITBOX_HEIGHT=12,OPEN_STRING_LEFT_OFFSET=-14,FRET_LABEL_OFFSET=.5,DOT_OFFSET_FROM_CENTER=45,PARTICLE_COUNT=1,PARTICLE_SIZE=18,PARTICLE_SPREAD_X=60,PARTICLE_SPREAD_Y=60,PARTICLE_ANIMATION_DURATION=1e3,FEEDBACK_DISPLAY_DURATION=2e3,CHORDS={major:[0,4,7],minor:[0,3,7],diminished:[0,3,6],augmented:[0,4,8],major7:[0,4,7,11],minor7:[0,3,7,10],dominant7:[0,4,7,10],diminished7:[0,3,6,9]},SCALES={major:[0,2,4,5,7,9,11],natural_minor:[0,2,3,5,7,8,10],harmonic_minor:[0,2,3,5,7,8,11],melodic_minor:[0,2,3,5,7,9,11],pentatonic_major:[0,2,4,7,9],pentatonic_minor:[0,3,5,7,10],blues:[0,3,5,6,7,10],dorian:[0,2,3,5,7,9,10],mixolydian:[0,2,4,5,7,9,10],lydian:[0,2,4,6,7,9,11],phrygian:[0,1,3,5,7,8,10],locrian:[0,1,3,5,6,8,10]},INTERVALS=[{name:"minor 2nd",semitones:1},{name:"major 2nd",semitones:2},{name:"minor 3rd",semitones:3},{name:"major 3rd",semitones:4},{name:"perfect 4th",semitones:5},{name:"tritone",semitones:6},{name:"perfect 5th",semitones:7},{name:"minor 6th",semitones:8},{name:"major 6th",semitones:9},{name:"minor 7th",semitones:10},{name:"major 7th",semitones:11},{name:"octave",semitones:12}],CHORD_NAME_MAP={major:"major",minor:"minor",diminished:"diminished",augmented:"augmented",major7:"major 7th",minor7:"minor 7th",dominant7:"dominant 7th",diminished7:"diminished 7th"},SCALE_NAME_MAP={major:"major",natural_minor:"natural minor",harmonic_minor:"harmonic minor",melodic_minor:"melodic minor",pentatonic_major:"major pentatonic",pentatonic_minor:"minor pentatonic",blues:"blues",dorian:"dorian",mixolydian:"mixolydian",lydian:"lydian",phrygian:"phrygian",locrian:"locrian"},fretboard=document.getElementById("fretboard"),taskDisplay=document.getElementById("task-text"),feedback=document.getElementById("feedback"),stringSelect=document.getElementById("string-select"),noteTypeSelect=document.getElementById("note-type-select"),modeSelect=document.getElementById("mode-select"),showNotesToggle=document.getElementById("show-notes-toggle"),intervalCheatsheet=document.getElementById("interval-cheatsheet");let resizeTimeout,target={},clickedPositions=[],incorrectPositions=[];function getNoteAt(e,t){return NOTE_MAP[(STRING_OFFSETS[e]+t)%12]}function isNoteValid(e){const t=noteTypeSelect.value,n=!e.includes("#");return"all"===t||("natural"===t?n:"accidental"!==t||!n)}function formatOrdinal(e){return 1===e?"1st":2===e?"2nd":3===e?"3rd":`${e}th`}function formatFretDescription(e){return 0===e?"open":`${e}${1===e?"st":2===e?"nd":3===e?"rd":"th"} fret`}function getChordNotes(e,t){const n=NOTE_MAP.indexOf(e);return CHORDS[t].map(e=>NOTE_MAP[(n+e)%12])}function getScaleNotes(e,t){const n=NOTE_MAP.indexOf(e);return SCALES[t].map(e=>NOTE_MAP[(n+e)%12])}function calculateStringYPosition(e,t){return.05*t+e/5*(.9*t)}function calculateFretXPosition(e,t){return e/12*t}function createStringElement(e,t,n,o){const a=calculateStringYPosition(e,t),r=document.createElement("div");r.classList.add("string-hitbox"),r.style.top=`${a}px`,r.dataset.string=e,"all"!==n&&e===parseInt(n)-1&&"interval"!==o&&r.classList.add("glow"),r.addEventListener("click",handleClick);const i=document.createElement("div");return i.classList.add("string-line"),r.appendChild(i),r}function createFretElements(e,t){for(let n=0;n<13;n++){const o=calculateFretXPosition(n,e),a=document.createElement("div");if(a.classList.add("fret-line"),a.style.left=`${o}px`,fretboard.appendChild(a),n>0){const t=document.createElement("div");t.classList.add("fret-label");const o=(n-.5)/12*e;t.style.left=`${o}px`,t.textContent=n,fretboard.appendChild(t)}if(DOT_FRETS.includes(n)){const a=document.createElement("div");if(a.classList.add("dot-marker"),a.style.left=o-e/12/2+"px",a.style.top=(12===n?t/2-45:t/2)+"px",fretboard.appendChild(a),12===n){const e=a.cloneNode();e.style.top=t/2+45+"px",fretboard.appendChild(e)}}}}function createOpenStringElements(e){for(let t=0;t<6;t++){const n=getNoteAt(t,0),o=calculateStringYPosition(t,e),a=document.createElement("div");a.classList.add("open-string-hitbox"),a.style.position="absolute",a.style.left="-14px",a.style.top=o-6+"px",a.style.width="20px",a.style.height="12px",a.style.cursor="pointer",a.dataset.string=t,a.dataset.fret="0",a.addEventListener("click",handleClick),fretboard.appendChild(a);const r=document.createElement("div");r.classList.add("note-label"),r.classList.add(n.includes("#")?"accidental":"natural"),r.style.left="-14px",r.style.top=`${o}px`,r.textContent=n,fretboard.appendChild(r)}}function createFrettedNoteLabels(e,t){for(let n=0;n<6;n++)for(let o=1;o<=12;o++){const a=getNoteAt(n,o),r=calculateFretXPosition(o,e),i=calculateStringYPosition(n,t),c=document.createElement("div");c.classList.add("note-label"),c.classList.add(a.includes("#")?"accidental":"natural"),c.style.left=r-e/12/2+"px",c.style.top=`${i}px`,c.textContent=a,fretboard.appendChild(c)}}function createPositionMarkers(e,t,n,o){e.forEach(e=>{const a=0===e.fret?-14:(e.fret-1+.5)*(n/12),r=calculateStringYPosition(e.string,o),i=document.createElement("div");i.classList.add("marker",t),i.style.left=`${a}px`,i.style.top=`${r}px`,fretboard.appendChild(i)})}function renderFretboard(){fretboard.innerHTML="",feedback.textContent="",feedback.classList.remove("feedback-correct","feedback-incorrect");const e=fretboard.clientWidth,t=fretboard.clientHeight,n=stringSelect.value,o=modeSelect.value,a=showNotesToggle.checked;for(let e=0;e<6;e++){const a=createStringElement(e,t,n,o);fretboard.appendChild(a)}createFretElements(e,t),"chord"!==o&&"scale"!==o||(clickedPositions.length>0&&createPositionMarkers(clickedPositions,"correct",e,t),incorrectPositions.length>0&&createPositionMarkers(incorrectPositions,"incorrect",e,t)),createOpenStringElements(t),a&&createFrettedNoteLabels(e,t)}function generateIntervalTask(){const e=NOTE_MAP[Math.floor(12*Math.random())],t=INTERVALS[Math.floor(Math.random()*INTERVALS.length)];target={mode:"interval",root:e,semitones:t.semitones,intervalName:t.name},taskDisplay.textContent=`Find the ${t.name} from ${e}`}function generateChordTask(){const e=Object.keys(CHORDS),t=e[Math.floor(Math.random()*e.length)],n=NOTE_MAP[Math.floor(12*Math.random())],o=getChordNotes(n,t);clickedPositions=[],incorrectPositions=[],target={mode:"chord",root:n,chordType:t,chordNotes:o,selectedNotes:[],completed:!1};const a=CHORD_NAME_MAP[t];taskDisplay.textContent=`Find all the notes in ${n} ${a} chord`}function generateScaleTask(){const e=Object.keys(SCALES),t=e[Math.floor(Math.random()*e.length)],n=NOTE_MAP[Math.floor(12*Math.random())],o=getScaleNotes(n,t);clickedPositions=[],incorrectPositions=[],target={mode:"scale",root:n,scaleType:t,scaleNotes:o,selectedNotes:[],completed:!1};const a=SCALE_NAME_MAP[t];taskDisplay.textContent=`Find all the notes in ${n} ${a} scale`}function generateNoteTask(){let e;const t=stringSelect.value;let n,o;e="all"===t?Math.floor(6*Math.random()):parseInt(t)-1;do{o=Math.floor(13*Math.random()),n=getNoteAt(e,o)}while(!isNoteValid(n));target={string:e,fret:o,note:n};const a=formatOrdinal(e+1);taskDisplay.textContent=`Click on the ${n} note on the ${a}.`}function newTask(){switch(modeSelect.value){case"interval":generateIntervalTask();break;case"chord":generateChordTask();break;case"scale":generateScaleTask();break;default:generateNoteTask()}}function calculateFretFromClick(e,t){return Math.floor(e/(t/12))+1}function createClickMarker(e,t){const n=document.createElement("div");return n.classList.add("marker"),n.style.left=`${e}px`,n.style.top=`${t}px`,n}function handleIntervalClick(e,t,n,o,a){const r=NOTE_MAP[(NOTE_MAP.indexOf(target.root)+target.semitones)%12],i=createClickMarker(t,n);e===r?(i.classList.add("correct"),showFeedback(`<div>✅ Good!</div><div style="font-size: 14px; color: #aaa;">You found ${e} correctly!</div>`,"feedback-correct"),createParticles(o,a,!0),fretboard.appendChild(i),setTimeout(()=>{renderFretboard(),newTask()},2e3)):(i.classList.add("incorrect"),showFeedback(`<div>❌ OOPS</div><div style="font-size: 14px; color: #aaa;">You clicked ${e}. Expected ${r}.</div>`,"feedback-incorrect"),createParticles(o,a,!1),fretboard.appendChild(i))}function handleChordClick(e,t,n,o,a,r,i){const c=createClickMarker(o,a);if(clickedPositions.some(e=>e.string===t))return c.classList.add("incorrect"),showFeedback(`<div>❌ String already used!</div><div style="font-size: 14px; color: #aaa;">You already selected a note on the ${formatOrdinal(t+1)} string. Choose a different string.</div>`,"feedback-incorrect"),createParticles(r,i,!1),void fretboard.appendChild(c);if(target.chordNotes.includes(e)){target.selectedNotes.push(e),clickedPositions.push({string:t,fret:n}),c.classList.add("correct");[...new Set(target.selectedNotes)].length===target.chordNotes.length?(showFeedback(`<div>✅ Chord Complete!</div><div style="font-size: 14px; color: #aaa;">You found all notes in ${target.root} ${target.chordType} chord!</div>`,"feedback-correct"),createParticles(r,i,!0),target.completed=!0,setTimeout(()=>{target.selectedNotes=[],clickedPositions=[],incorrectPositions=[],renderFretboard(),newTask()},2e3)):(showFeedback(`<div>✅ Good!</div><div style="font-size: 14px; color: #aaa;">Found ${e}.</div>`,"feedback-correct"),createParticles(r,i,!0))}else c.classList.add("incorrect"),showFeedback(`<div>❌ Not in chord!</div><div style="font-size: 14px; color: #aaa;">${e} is not in ${target.root} ${target.chordType} chord. Need: ${target.chordNotes.filter(e=>!target.selectedNotes.includes(e)).join(", ")}</div>`,"feedback-incorrect"),createParticles(r,i,!1),incorrectPositions.push({string:t,fret:n});fretboard.appendChild(c)}function handleScaleClick(e,t,n,o,a,r,i){const c=createClickMarker(o,a);if(target.scaleNotes.includes(e))if(target.selectedNotes.includes(e))c.classList.add("incorrect"),showFeedback(`<div>❌ Already found!</div><div style="font-size: 14px; color: #aaa;">You already found ${e}. Find the remaining notes: ${target.scaleNotes.filter(e=>!target.selectedNotes.includes(e)).join(", ")}</div>`,"feedback-incorrect"),createParticles(r,i,!1);else if(target.selectedNotes.push(e),clickedPositions.push({string:t,fret:n}),c.classList.add("correct"),target.selectedNotes.length===target.scaleNotes.length){const e=SCALE_NAME_MAP[target.scaleType];showFeedback(`<div>✅ Scale Complete!</div><div style="font-size: 14px; color: #aaa;">You found all notes in ${target.root} ${e} scale!</div>`,"feedback-correct"),createParticles(r,i,!0),target.completed=!0,setTimeout(()=>{target.selectedNotes=[],clickedPositions=[],incorrectPositions=[],renderFretboard(),newTask()},2e3)}else showFeedback(`<div>✅ Good!</div><div style="font-size: 14px; color: #aaa;">Found ${e}.</div>`,"feedback-correct"),createParticles(r,i,!0);else c.classList.add("incorrect"),showFeedback(`<div>❌ Not in scale!</div><div style="font-size: 14px; color: #aaa;">${e} is not in ${target.root} ${target.scaleType} scale. Need: ${target.scaleNotes.filter(e=>!target.selectedNotes.includes(e)).join(", ")}</div>`,"feedback-incorrect"),createParticles(r,i,!1),incorrectPositions.push({string:t,fret:n});fretboard.appendChild(c)}function handleNoteClick(e,t,n,o,a,r,i){const c=createClickMarker(o,a);if(e===target.note&&t===target.string)c.classList.add("correct"),showFeedback(`<div>✅ Good!</div><div style="font-size: 14px; color: #aaa;">You found ${e} on the ${formatOrdinal(t+1)} string!</div>`,"feedback-correct"),createParticles(r,i,!0),fretboard.appendChild(c),setTimeout(()=>{renderFretboard(),newTask()},2e3);else{const n=formatOrdinal(target.string+1),o=formatOrdinal(t+1);c.classList.add("incorrect"),showFeedback(`<div>❌ OOPS</div><div style="font-size: 14px; color: #aaa;">You clicked ${e} on the ${o} string. Expected ${target.note} on the ${n} string.</div>`,"feedback-incorrect"),createParticles(r,i,!1),fretboard.appendChild(c)}}function handleClick(e){const t=modeSelect.value,n=parseInt(e.currentTarget.dataset.string),o=e.currentTarget.classList.contains("open-string-hitbox");let a,r,i,c;const s=fretboard.clientHeight;if(o)a=0,r=getNoteAt(n,0),i=-14,c=calculateStringYPosition(n,s);else{i=e.offsetX;a=calculateFretFromClick(i,fretboard.clientWidth),r=getNoteAt(n,a),c=calculateStringYPosition(n,s)}switch(t){case"interval":handleIntervalClick(r,i,c,e.clientX,e.clientY);break;case"chord":handleChordClick(r,n,a,i,c,e.clientX,e.clientY);break;case"scale":handleScaleClick(r,n,a,i,c,e.clientX,e.clientY);break;default:handleNoteClick(r,n,a,i,c,e.clientX,e.clientY)}}function createParticles(e,t,n){const o=n?["#4CAF50"]:["#f44336"],a=e,r=t;for(let e=0;e<1;e++){const e=document.createElement("div");e.className="particle",e.style.width="18px",e.style.height="18px",e.style.left=a-9+"px",e.style.top=r-9+"px",e.style.backgroundColor=o[Math.floor(Math.random()*o.length)];const t=60*Math.random()-30,n=60*Math.random()-30;e.style.transform=`translate(${t}px, ${n}px)`,document.body.appendChild(e),setTimeout(()=>{e.parentNode&&e.parentNode.removeChild(e)},1e3)}}function updateNoteControlsVisibility(){const e=modeSelect.value,t=document.getElementById("string-select").parentElement.parentElement,n=document.getElementById("note-type-select").parentElement.parentElement;"interval"===e||"chord"===e||"scale"===e?(t.style.display="none",n.style.display="none"):(t.style.display="flex",n.style.display="flex")}function updateInstructions(){const e=modeSelect.value,t=document.getElementById("instructions-title"),n=document.getElementById("instructions-text"),o={interval:{title:"Interval Training",text:"In guitar theory (and music theory in general), intervals are the building blocks of melody and harmony. An interval is the distance between two notes, measured in steps or semitones."},chord:{title:"Chord Training",text:"Learn to identify the notes that make up different chord types. Click on all the notes that belong to the given chord. You can select notes in any order, and the exercise is complete when you've found all the required notes."},scale:{title:"Scale Training",text:"Master scale construction by identifying all the notes in different scale types. Click on each note that belongs to the given scale. This training helps you understand scale patterns and improves your ability to play scales across the fretboard."},default:{title:"Note Training",text:"Knowing the notes of the guitar neck from memory is one of the most powerful things you can do as a guitarist. It unlocks fluency, creativity, and precision in virtually every area of your playing. Test your knowledge by guessing the note on the fretboard."}},a=o[e]||o.default;t.textContent=a.title,n.textContent=a.text}function showFeedback(e,t){feedback.textContent="",feedback.classList.remove("feedback-correct","feedback-incorrect"),requestAnimationFrame(()=>{feedback.innerHTML=e,feedback.classList.add(t)})}function showModal(e){const t=document.getElementById("modal-overlay"),n=document.getElementById("modal-content-inner"),o=document.getElementById(e).innerHTML;n.innerHTML=o,t.style.display="flex"}function hideModal(){document.getElementById("modal-overlay").style.display="none"}function handleScroll(){const e=document.querySelector(".main-header");window.innerWidth<=600||window.scrollY>50?e.classList.add("scrolled"):e.classList.remove("scrolled")}document.getElementById("new-task").addEventListener("click",()=>{"chord"!==modeSelect.value&&"scale"!==modeSelect.value||(clickedPositions=[],incorrectPositions=[],target&&target.selectedNotes&&(target.selectedNotes=[])),feedback.textContent="",feedback.classList.remove("feedback-correct","feedback-incorrect"),renderFretboard(),newTask()}),modeSelect.addEventListener("change",()=>{"interval"===modeSelect.value&&(stringSelect.value="all"),clickedPositions=[],incorrectPositions=[],target&&target.selectedNotes&&(target.selectedNotes=[]),feedback.textContent="",feedback.classList.remove("feedback-correct","feedback-incorrect"),renderFretboard(),newTask(),updateInstructions(),updateNoteControlsVisibility()}),stringSelect.addEventListener("change",()=>{renderFretboard(),newTask()}),noteTypeSelect.addEventListener("change",()=>{renderFretboard(),newTask()}),showNotesToggle.addEventListener("change",()=>{renderFretboard()}),document.getElementById("info-icon").addEventListener("click",()=>{const e=modeSelect.value;let t;t="interval"===e?"interval-modal-content":"chord"===e?"chord-modal-content":"scale"===e?"scale-modal-content":"note-modal-content",showModal(t)}),document.getElementById("modal-close").addEventListener("click",hideModal),document.getElementById("modal-overlay").addEventListener("click",e=>{"modal-overlay"===e.target.id&&hideModal()}),document.addEventListener("keydown",e=>{if("Escape"===e.key){"flex"===document.getElementById("modal-overlay").style.display&&hideModal()}}),window.addEventListener("scroll",handleScroll),window.addEventListener("resize",()=>{clearTimeout(resizeTimeout),resizeTimeout=setTimeout(()=>{renderFretboard(),handleScroll()},250)}),window.addEventListener("orientationchange",()=>{setTimeout(()=>{renderFretboard(),handleScroll()},500)}),renderFretboard(),newTask(),updateInstructions(),updateNoteControlsVisibility(),handleScroll();